import java.io.File;
import java.io.FileNotFoundException;
import java.util.Random;
import java.util.Scanner;

public class quickSort {
  public static void main(String args[]) throws FileNotFoundException {
    // okay didnt realize that it needs to be defined as an integer not INT.  - Tall Array
    Scanner scanner = new Scanner(new File("arr1alt.txt"));
        int [] tall = new int [2000000];
        int i = 0;
        while(scanner.hasNextInt())
        {
             tall[i++] = scanner.nextInt();
        }

        // randomly generated values 
        Random rd = new Random();
        Integer arr4[] = new Integer[50000];
        for (int j = 0; j < arr4.length; j++)
        {
          arr4[j] = rd.nextInt();
        }
    long endTime, elapsed;
    long startTime = System.currentTimeMillis();
    Integer arr[] = {631, 699, 867, 950, 329, 846, 951, 83, 291, 85, 591, 93, 644, 78, 938, 541, 141, 415, 247, 914, 775, 173, 2, 445, 
      519, 465, 913, 418, 842, 836, 639, 307, 157, 235, 106, 183, 356, 385, 760, 449, 920, 507, 56, 669, 528, 269, 164, 
      129, 894, 20, 454, 160, 74, 417, 923, 493, 625, 822, 795, 455, 205, 824, 900, 388, 122, 843, 924, 818, 979, 980, 16, 
      256, 710, 788, 282, 92, 453, 402, 268, 241, 617, 902, 66, 105, 635, 632, 821, 683, 557, 838, 694, 116, 468, 653, 859, 
      138, 13, 463, 64, 794, 119, 740, 687, 24, 353, 244, 321, 452, 879, 739, 614, 725, 501, 131, 566, 948, 864, 435, 553, 15, 
      634, 524, 909, 97, 326, 807, 698, 43, 621, 782, 371, 615, 57, 689, 99, 384, 605, 45, 574, 579, 258, 331, 386, 550, 779, 752,
       461, 188, 702, 734, 242, 512, 364, 5, 764, 41, 320, 988, 464, 239, 86, 831, 626, 478, 798, 223, 793, 531, 611, 401, 132, 743, 
       361, 266, 71, 607, 195, 397, 762, 809, 971, 568, 958, 189, 877, 422, 594, 447, 940, 858, 854, 406, 515, 460, 738, 36, 933, 372,
        448, 593, 709, 547, 230, 393, 170, 427, 18, 823, 763, 178, 941, 103, 987, 984, 810, 777, 344, 735, 962, 12, 744, 546, 520, 832, 
        595, 509, 597, 149, 374, 954, 640, 330, 412, 876, 586, 508, 181, 872, 659, 560, 1000, 104, 654, 335, 600, 176, 79, 599, 484, 747,
         690, 10, 382, 598, 572, 514, 975, 773, 115, 603, 618, 35, 185, 792, 647, 802, 317, 192, 349, 624, 648, 351, 839, 708, 210, 142, 4, 672, 
         194, 959, 312, 298, 284, 897, 248, 337, 255, 887, 881, 691, 158, 724, 522, 450, 148, 90, 150, 228, 504, 72, 231, 313, 251, 338, 811, 853, 
         544, 535, 408, 362, 750, 327, 503, 758, 996, 833, 701, 275, 604, 301, 911, 67, 703, 991, 486, 707, 943, 416, 55, 888, 780, 495, 893, 929, 407,
          281, 992, 855, 218, 772, 916, 101, 431, 363, 497, 663, 728, 350, 601, 622, 564, 555, 21, 1, 487, 201, 193, 32, 358, 727, 526, 860, 8, 118, 109, 543, 799, 347, 303, 817, 426, 761, 367, 816, 215, 922, 
          866, 967, 31, 420, 278, 582, 636, 985, 664, 559, 757, 565, 477, 213, 936, 212, 290, 438, 23, 714, 606, 945, 206, 430, 112, 904, 536, 432, 236, 705, 930, 576, 100, 308, 287, 
          801, 961, 136, 167, 696, 910, 114, 783, 305, 232, 665, 796, 260, 721, 474, 311, 425, 770, 198, 19, 108, 820, 978, 706, 590, 252, 925, 172, 414, 216, 365, 998, 652, 50, 245, 994, 257, 323, 121, 850, 786, 
          982, 339, 40, 645, 147, 939, 518, 539, 200, 891, 937, 932, 42, 869, 516, 983, 751, 915, 630, 342, 868, 861, 166, 113, 270, 482, 784, 716, 551, 26, 143, 711, 441, 332, 34, 753, 39, 569, 862, 570, 912, 926, 47, 921, 68, 629, 375, 70, 410, 221, 538, 616, 225, 310, 54, 800, 895, 562, 851, 197, 69, 903, 202, 436, 905, 59, 229, 409, 662, 390, 986, 254, 505, 98, 394, 852, 379, 952, 391, 947, 309, 837, 491, 927, 297, 428, 827, 77, 421, 808, 226, 589, 787, 159, 548, 814, 145, 217, 977, 790, 974, 556, 741, 296, 171, 292, 917, 899, 190, 204, 343, 334, 199, 37, 151, 511, 392, 791, 571, 433, 489, 156, 400, 896, 135, 813, 884, 492, 681, 233, 577, 457, 588, 243, 25, 756, 527, 885, 238, 404, 530, 510, 558, 717, 117, 398, 729, 849, 965, 376, 360, 65, 748, 502, 434, 667, 972, 84, 641, 396, 288, 828, 898, 381, 733, 755, 144, 378, 785, 345, 768, 609, 759, 286, 370, 419, 220, 44, 304, 720, 686, 107, 963, 111, 585, 411, 554, 676, 302, 211, 697, 847, 154, 470, 61, 731, 29, 46, 789, 27, 498, 444, 880, 324, 906, 458, 602, 778, 901, 389, 805, 584, 592, 48, 661, 771, 322, 892, 424, 261, 830, 610, 368, 523, 534, 49, 7, 63, 137, 82, 563, 208, 140, 684, 989, 678, 3, 234, 219, 776, 152, 573, 736, 475, 293, 214, 469, 316, 315, 274, 713, 395, 168, 627, 620, 657, 745, 856, 960, 670, 673, 300, 537, 517, 481, 966, 532, 964, 224, 650, 333, 549, 187, 806, 956, 658, 88, 993, 377, 875, 490, 737, 314, 11, 749, 674, 22, 882, 712, 9, 596, 191, 133, 340, 263, 638, 746, 990, 336, 264, 613, 124, 38, 521, 619, 276, 17, 380, 366, 403, 675, 973, 446, 265, 196, 471, 874, 995, 651, 928, 870, 33, 692, 253, 459, 440, 533, 878, 467, 267, 656, 169, 485, 815, 295, 285, 60, 545, 283, 328, 953, 723, 186, 999, 240, 123, 89, 52, 968, 476, 134, 289, 58, 848, 174, 666, 405, 175, 346, 373, 578, 442, 649, 680, 871, 766, 479, 429, 845, 561, 883, 826, 944, 496, 567, 819, 62, 341, 53, 28, 997, 835, 612, 719, 679, 319, 250, 774, 227, 628, 355, 633, 863, 483, 128, 443, 660, 804, 95, 499, 262, 423, 277, 542, 865, 646, 718, 726, 643, 259, 834, 797, 976, 272, 781, 704, 581, 812, 844, 357, 840, 957, 841, 942, 466, 494, 139, 177, 271, 742, 369, 299, 318, 623, 127, 754, 472, 671, 857, 769, 500, 163, 179, 81, 529, 75, 803, 130, 383, 886, 273, 155, 473, 540, 730, 970, 580, 587, 222, 120, 552, 655, 73, 907, 162, 825, 51, 87, 91, 480, 608, 456, 6, 732, 829, 180, 399, 387, 439, 348, 695, 306, 525, 642, 890, 165, 76, 931, 209, 767, 352, 949, 583, 934, 110, 30, 873, 513, 207, 688, 413, 919, 700, 146, 693, 889, 153, 14, 325, 668, 94, 280, 715, 677, 246, 946, 294, 96, 359, 203, 765, 955, 722, 437, 182, 575, 969, 354, 506, 685, 125, 935, 908, 279, 126, 80, 102, 488, 981, 918, 249, 184, 637, 451, 682, 161, 462, 237 };
      quicksort(arr4);
      endTime = System.currentTimeMillis();
      elapsed = endTime - startTime;
      System.out.println(elapsed * 0.001 + " Seconds\n"); 
      
  }

  public static void quicksort(Comparable[] a) {
    quicksort(a, 0, a.length - 1);
  }

  static void quicksort(Comparable[] a, int low, int high) {
    int CUTOFF = 15;
    if (low + CUTOFF > high)
      insertionSort(a, low, high);
    else {
      int middle = (low + high) / 2;
      if (a[middle].compareTo(a[low]) < 0)
        swapReferences(a, low, middle);
      if (a[high].compareTo(a[low]) < 0)
        swapReferences(a, low, high);
      if (a[high].compareTo(a[middle]) < 0)
        swapReferences(a, middle, high);

      swapReferences(a, middle, high - 1);
      Comparable pivot = a[high - 1];

      int i, j;
      for (i = low, j = high - 1;;) {
        while (a[++i].compareTo(pivot) < 0)
          ;
        while (pivot.compareTo(a[--j]) < 0)
          ;
        if (i >= j)
          break;
        swapReferences(a, i, j);
      }
      swapReferences(a, i, high - 1);

      quicksort(a, low, i - 1); 
      quicksort(a, i + 1, high);
    }
  }

  public static final void swapReferences(Object[] a, int index1, int index2) {
    Object tmp = a[index1];
    a[index1] = a[index2];
    a[index2] = tmp;
  }

  private static void insertionSort(Comparable[] a, int low, int high) {
    for (int p = low + 1; p <= high; p++) {
      Comparable tmp = a[p];
      int j;

      for (j = p; j > low && tmp.compareTo(a[j - 1]) < 0; j--)
        a[j] = a[j - 1];
      a[j] = tmp;
    }
  }
}


